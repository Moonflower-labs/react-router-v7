model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  customerId       String?
  password         Password?
  profile          Profile?
  cart             Cart?             @relation(fields: [cartId], references: [id])
  cartId           String?
  reviews          Review[]
  productReviews   ProductReview[]
  subscription     Subscription?
  comments         Comment[]
  posts            Post[]
  likes            Like[]
  favorites        Favorite[]
  rating           Rating[]
  premiumQuestions PremiumQuestion[]
  questions        Question[]
  orders           Order[]
  replies          Reply[]

  ResetToken ResetToken[]

  Message Message[]

  shippingAddress ShippingAddress[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Profile {
  id                 String  @id @default(cuid())
  basicQuestionCount Int     @default(0)
  tarotQuestionCount Int     @default(0)
  liveQuestionCount  Int     @default(0)
  avatar             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String?

  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId String?

  createdAt DateTime @default(now())
}

model Favorite {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? // Optional for posts, allowing null if it is a video comment

  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String? // Optional for videos, allowing null if it is a post comment
  createdAt DateTime @default(now())
}

model ResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id     String @id @default(cuid())
  text   String
  score  Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1      String
  line2      String?
  city       String?
  state      String?
  postalCode String
  country    String
  Order      Order[]
  createdAt  DateTime @default(now())
}
