// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  customerId       String?
  password         Password?
  profile          Profile?
  cart             Cart?             @relation(fields: [cartId], references: [id])
  cartId           String?
  reviews          Review[]
  subscription     Subscription?
  comments         Comment[]
  posts            Post[]
  likes            Like[]
  favorites        Favorite[]
  rating           Rating[]
  premiumQuestions PremiumQuestion[]
  questions        Question[]
  orders           Order[]
  replies          Reply[]


  ResetToken ResetToken[]

  Message Message[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Profile {
  id                 String  @id @default(cuid())
  basicQuestionCount Int     @default(0)
  tarotQuestionCount Int     @default(0)
  liveQuestionCount  Int     @default(0)
  avatar             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  prices      Price[]
  thumbnail   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  OrderItem OrderItem[]
}

model Price {
  id        String  @id @default(cuid())
  amount    Int
  product   Product @relation(fields: [productId], references: [id])
  productId String

  info      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  cartItem   CartItem[]
}

model Review {
  id     String @id @default(cuid())
  text   String
  score  Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id     String @id
  status String
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId String @unique
  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cancellationDate DateTime?
}

model Plan {
  id      String @id @default(cuid())
  name    String
  priceId String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription Subscription[]
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  guest     Boolean    @default(false)
  user      User[]
}

model CartItem {
  id         String  @id @default(cuid())
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId     String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  quantity   Int
  price      Price   @relation(fields: [priceId], references: [id])
  totalPrice Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  priceId   String
}

model Category {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video[]  @relation("VideoCategories")
  post      Post[]   @relation("PostCategories")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String? // Optional for posts, allowing null if it is a video comment

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String? // Optional for videos, allowing null if it is a post comment
  likes   Like[]
  replies Reply[]
}

model Rating {
  id     String  @id @default(cuid())
  value  Int
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String? // Optional for posts, allowing null if it is a video comment

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String? // Optional for videos, allowing null if it is a post comment

  createdAt DateTime @default(now())
}

model Reply {
  id      String @id @default(cuid())
  content String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  parentReply   Reply?  @relation("ParentReply", fields: [parentReplyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentReplyId String?

  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]  @relation("ParentReply")
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String?

  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId String?

  createdAt DateTime @default(now())
}

model Favorite {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? // Optional for posts, allowing null if it is a video comment

  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String? // Optional for videos, allowing null if it is a post comment
  createdAt DateTime @default(now())
}

model Order {
  id      String  @id @default(cuid())
  guest   Boolean
  guestId String?

  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId     String?
  orderItems OrderItem[]

  status String @default("Pending")

  createdAt DateTime @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  price     Price   @relation(fields: [priceId], references: [id])
  priceId   String

  quantity Int

  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories Category[] @relation("PostCategories")
  comments   Comment[]
  likes      Like[]
  favorites  Favorite[]
  rating     Rating[]
}

model PremiumQuestion {
  id      String  @id @default(cuid())
  section String //todo:change to enum
  name    String?
  text    String
  info    String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
}

model Question {
  id       String @id @default(cuid())
  name     String
  subject  String
  text     String
  media    String
  ageGroup String
  gender   String
  country  String
  city     String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String

  createdAt DateTime @default(now())
}

model ResetToken {
  id        String @id @default(cuid())
  userId    String 
  token     String @unique
  createdAt DateTime @default(now())
  expiresAt DateTime 
  user      User @relation(fields: [userId],references: [id])
}

// todo: add enums for production db
enum Section {
  Spirit
  Soul
  Live
}

model Video {
  id          String  @id @default(cuid())
  section     Section
  title       String
  description String
  url         String
  published   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[] @relation("VideoCategories")
  comments   Comment[]
  likes      Like[]
  favorites  Favorite[]
  rating     Rating[]
}

model Message {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  user User[]
}