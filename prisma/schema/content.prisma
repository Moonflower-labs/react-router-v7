model Post {
  id          String     @id @default(cuid())
  title       String
  description String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("PostCategories")
  comments    Comment[]
  likes       Like[]
  favorites   Favorite[]
  rating      Rating[]
}

enum Section {
  Spirit
  Soul
  Live
}

model Video {
  id          String     @id @default(cuid())
  section     Section
  title       String
  description String
  url         String
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("VideoCategories")
  comments    Comment[]
  likes       Like[]
  favorites   Favorite[]
  rating      Rating[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video[]  @relation("VideoCategories")
  post      Post[]   @relation("PostCategories")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String? // Optional for posts, allowing null if it is a video comment
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId   String? // Optional for videos, allowing null if it is a post comment
  likes     Like[]
  replies   Reply[]
}

model Reply {
  id            String   @id @default(cuid())
  content       String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  comment       Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId     String?
  parentReply   Reply?   @relation("ParentReply", fields: [parentReplyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentReplyId String?
  likes         Like[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  replies       Reply[]  @relation("ParentReply")
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String? // Optional for posts, allowing null if it is a video comment
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId   String? // Optional for videos, allowing null if it is a post comment
  createdAt DateTime @default(now())
}
